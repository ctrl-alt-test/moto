// Generated with Shader Minifier 1.3.5 (https://github.com/laurentlb/Shader_Minifier/)
#ifndef SHADERS_INL_
# define SHADERS_INL_
# define VAR_a_position "k"
# define VAR_anvilPos "y"
# define VAR_camFocal "i"
# define VAR_camPos "c"
# define VAR_camTa "x"
# define VAR_fragColor "v"
# define VAR_iTime "d"
# define VAR_sunDir "f"
# define VAR_tex "g"

const char *moto_frag =
 "#version 150\n"
 "out vec4 v;"
 "const vec2 m=vec2(1920,1080);"
 "in vec3 y,f,c,x;"
 "in float i;"
 "uniform float d;"
 "const float l=acos(-1.);"
 "vec2 n(vec2 v,vec2 f)"
 "{"
   "return v.x<f.x?"
     "v:"
     "f;"
 "}"
 "mat3 s(vec3 v,vec3 f)"
 "{"
   "vec3 m=normalize(f-v),c=normalize(cross(m,normalize(vec3(0,1,0))));"
   "return mat3(c,cross(c,m),m);"
 "}"
 "mat2 n(float v)"
 "{"
   "float m=cos(v),f=sin(v);"
   "return mat2(m,f,-f,m);"
 "}"
 "float t(vec3 v,vec3 f)"
 "{"
   "vec3 m=abs(v)-f;"
   "return length(max(m,0.))+min(max(m.x,max(m.y,m.z)),0.);"
 "}"
 "vec2 s(vec3 v)"
 "{"
   "v-=y;"
   "v.xz=n(1.)*v.xz;"
   "float f=pow(clamp(v.y-1.,.004,1.),.5),m=t(v-vec3(0,1,0),vec3(1.5-f,1,2.5-f));"
   "if(m<10.)"
     "{"
       "m=min(m,t(v-vec3(0,3,0),vec3(2,1,3)));"
       "float c=length((v.yz-vec2(4.5,3))*vec2(1,.8))-2.;"
       "c=max(c,abs(v.x)-.5);"
       "c=max(c,v.y-3.5);"
       "m=min(m,c);"
       "return vec2(m-.1,11);"
     "}"
   "return vec2(9e7,0);"
 "}"
 "vec2 t(vec3 v)"
 "{"
   "return n(vec2(v.y,0),s(v));"
 "}"
 "float n(vec3 v,vec3 f,float m,float x)"
 "{"
   "float c=.5*m-t(v+f*m*.5).x,y=.95*(m-t(v+f*m).x);"
   "return clamp(1.-x*1.5*(c+y),0.,1.);"
 "}"
 "float p(vec3 v,vec3 f)"
 "{"
   "float m=.01;"
   "for(int c=0;c<128;c++)"
     "{"
       "float d=t(v+f*m).x;"
       "m+=d;"
       "if(m>1e2||abs(d)<.001)"
         "break;"
     "}"
   "return m;"
 "}"
 "float e(vec3 v,vec3 f)"
 "{"
   "float m=1.,c=.08;"
   "for(int i=0;i<64;i++)"
     "{"
       "float d=t(v+f*c).x;"
       "m=min(m,30.*d/c);"
       "c+=d;"
       "if(m<1e-4||c>50.)"
         "break;"
     "}"
   "return clamp(m,0.,1.);"
 "}"
 "void main()"
 "{"
   "vec2 l=gl_FragCoord.xy/m,y=l*2.-1.;"
   "y.x*=m.x/m.y;"
   "vec3 z=c,a=s(z,x)*normalize(vec3(y,i));"
   "float k=p(z,a);"
   "vec3 g=z+a*k;"
   "vec2 r=t(g),C=vec2(1e-4,0);"
   "vec3 w=normalize(vec3(r.x-t(g-C.xyy).x,r.x-t(g-C.yxy).x,r.x-t(g-C.yyx).x));"
   "float D=n(g,w,.15,1.)*n(g,w,1.,.1)*.5,F=e(g,f),E=1.+dot(a,w);"
   "vec3 B=vec3(1,.8,.7)*max(dot(w,f),0.)*pow(vec3(F),vec3(1,1.2,1.5)),A=vec3(1,.8,.7)*.1*max(dot(w,-f),0.)*D,G=vec3(.5)*mix(n(g,a,.3,.75),n(g,f,.3,.75),.5),H=vec3(1)*max(dot(reflect(a,w),f),0.),I=vec3(.4,.45,.5)*D,b=vec3(0);"
   "if(r.y==0.)"
     "b=vec3(3),G*=0.,H*=0.;"
   "else if(r.y==11.)"
     "b=vec3(1),B*=vec3(.1)*E,I*=vec3(.1)*E,A*=0.,G*=0.,H=pow(H,vec3(100))*E*2.;"
   "vec3 u=clamp(mix(b*(I+B*.5+A*2.+G*2.)+vec3(0)+H*F+vec3(0),vec3(.7,.8,1),smoothstep(90.,1e2,k)),0.,1.);"
   "u=pow(pow(u,vec3(1./2.2)),vec3(1,1.05,1.1));"
   "float J=length(gl_FragCoord.xy/m.xx-vec2(.5,.3)),K=max(.137,smoothstep(147.,146.,d));"
   "u*=smoothstep(K,K-.005,J);"
   "v=vec4(u/(1.+pow(length(l*2.-1.),4.)*.04),1);"
 "}";

const char *moto_vert =
 "#version 150\n"
 "in vec4 k;"
 "out vec3 f,c,x;"
 "out float i;"
 "uniform float d;"
 "void main()"
 "{"
   "gl_Position=k;"
   "float v=d;"
   "i=2.;"
   "f=normalize(vec3(3.5,1,-1));"
   "c=vec3(5.+v*.5,2,v*.5);"
   "x=vec3(0,2,0);"
 "}";

const char *fxaa_frag =
 "#version 150\n"
 "out vec4 v;"
 "const vec2 z=vec2(1920,1080);"
 "uniform sampler2D g;"
 "void main()"
 "{"
   "vec2 m=1./z,c=gl_FragCoord.xy*m;"
   "vec4 f=vec4(c,c-m*.5);"
   "vec3 x=vec3(.299,.587,.114);"
   "float y=dot(textureLod(g,f.zw,0.).xyz,x),w=dot(textureLod(g,f.zw+vec2(1,0)*m.xy,0.).xyz,x),a=dot(textureLod(g,f.zw+vec2(0,1)*m.xy,0.).xyz,x),d=dot(textureLod(g,f.zw+vec2(1)*m.xy,0.).xyz,x),t=dot(textureLod(g,f.xy,0.).xyz,x);"
   "vec2 i=vec2(-y-w+a+d,y+a-w-d);"
   "float k=1./(min(abs(i.x),abs(i.y))+1./128.);"
   "i=min(vec2(8),max(vec2(-8),i*k))*m.xy;"
   "vec3 l=.5*(textureLod(g,f.xy+i*(1./3.-.5),0.).xyz+textureLod(g,f.xy+i*(2./3.-.5),0.).xyz),r=l*.5+.25*(textureLod(g,f.xy+i*-.5,0.).xyz+textureLod(g,f.xy+i*.5,0.).xyz);"
   "float n=dot(r,x);"
   "v=n<min(t,min(min(y,w),min(a,d)))||n>max(t,max(max(y,w),max(a,d)))?"
     "vec4(l,1):"
     "vec4(r,1);"
 "}";

#endif // SHADERS_INL_
